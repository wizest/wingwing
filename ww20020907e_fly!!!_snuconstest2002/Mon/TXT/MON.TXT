#include <AM188ES.H>

#define SELECT     (word)(0x2000)
#define CANCEL     (word)(0x0400)
#define GetKey()    ( (~inport(PDATA1)) &(SELECT|CANCEL) )

word pdata0 = (word)(0x0000);
word pdata1 = (word)(0x0000);

void InitPort(void);
void InitSerial(void);
void SendChar(byte Char);
void SendString(char* String);
byte ReceiveChar(void);
byte ReceiveByte(void);
void DownLoad(long LoadStartAddress);

void Delay(word ms)
{
	 int adjust;

	 while (ms--)
	 {
		 adjust =1132;
		 while(adjust--);
	 }
}

#define La (word)(0x0100)
#define Lb (word)(0x0200)
#define Lc (word)(0x0400)
#define Ld (word)(0x0800)
#define Le (word)(0x1000)
#define Lf (word)(0x2000)
#define Lg (word)(0x4000)

void LedDisplay(void)
{
	word LED[] ={ La, Lb, Lc, Ld, Le, Lf, La };

	for( byte ptr=0; ptr<7; ptr++)
	{
		pdata0 |=(word)(LED[ptr]);
		outport(PDATA0, pdata0);
		Delay(100);
		pdata0 &=(word)(~LED[ptr]);
	}
}

void InitPort(void)
{
	//disable watch dog timer
	outport(0xFFE6,(word)0x3333);
	outport(0xFFE6,(word)0xCCCC);
	outport(0xFFE6,(word)0x0000);

	//PIO setting
	outport(PIOMODE0, (word)0xFFFF);
	outport(PDIR0,    (word)0x0000);
	outport(PDATA0, (word)0x0000);

	outport(PIOMODE1, (word)0x02FE);
	outport(PDIR1,    (word)0x2400);
	outport(PDATA1, (word)0x0000);

	//UMC
	outport(UMCS, (word)0xF0BC);

	//LMC
	outport(LMCS, (word)0x0FBC);

	//
	outport(MPCS, (word)0x80BC);

	//
	outport(PACS, (word)0x0075);
}

void InitSerial(void)
{
	outport(SP1CT,0x0061);
	// 0000 0000 0110 0001
	// transmitter, receive interrupt disable
	// transmit,receive mode
	// no parity
	// mode 1 ->

	outport(SP1BAUD,22);
	// BAUDDIV = [processor_requency/(16*baud rate wanted)]-1
}

#define TEMT (0x0004)
void SendChar(byte Char)
{
	while( !(inport(SP1STS)&TEMT) );//wait
	outport(SP1TD,Char);
}

void SendString(char* String)
{
	while(*String) SendChar(*String++);
}

//'COM'으로 부터의 전송 프로토콜
// 주로 INTEL HEX code로 전송된다.

// INTEL HEX FORMAT ->":LLAAAATTDD...DDCC"
// :    ->레코드 마크
//		  (레코드의 시작을 표시,문자 콜론(:)으로 표시함)
// LL   ->데이터의 바이트 수
//		  (16진수로 표시,데이타의 시작,즉 레코드 마크이후 부터 체크섬 전까지)
// AAAA ->로케이션 어드레스
//		  (데이타의 선두 바이트 어드레스
//		   즉,데이타가 메모리에 저장되기 시작하는 어드레스이다.
//		   16진수 4자리로 표시, 순서:상위하위)
// TT   ->레코드 타입
//		  (00:데이타 레코드/ 01:끝/ 11:시작)
// DD..D->데이타
//		  (1바이트를 16진수 2자리로 표현)
// CC   ->체크섬
//                (바이트 단위 데이타 각각의 총합과 체크섬을 더하면
//                 최하위 바이트값이 00이 되도록 정한다.
//		   수식 : CC = 00-(LL+AA+AA+TT+DD+...+DD) )
// 'COM'으로 부터 한바이트의 정보가 니블 단위로 나뉘어서 전송되는데,
// 상위 니블이 먼저 바이트로 캐스팅되어
// 문자형태로 전송된다. 그러나 이것은 문자 "자체"가 아니라
// 16진수값을 나타내는 것이다.
// 그러므로 이것을 문자로 받아들이지 말고 "숫자값으로 전환"하여 받아야 한다.
// 예)":20000000FABAA2FFEDBBEA06BA00008EDB8EC233F633FFB9EE11FCF3A48ED2BCFEFF8EDA59"


//-> 헥사코드의 문자 자체의 아스키 값(바이트크기)로 전달받으므로
// 원래 숫자값으로 전환한다.          ~~~~~~~~~~

#define RDR 0x0080
byte ReceiveChar( void)
{
	while( !(inport(SP1STS)&RDR) ); //wait
	return inport(SP1RD);
}

byte ReceiveByte(void)
{
	byte HighNibble =ReceiveChar();
	byte LowNibble  =ReceiveChar();

	//바이트 "문자"형태의 전송 정보를 원래의 니블,"숫자값"으로 전환
	if( HighNibble<'A' ) HighNibble =HighNibble -'0';
			else HighNibble =HighNibble -'A' +10;

	if( LowNibble<'A' ) LowNibble =LowNibble -'0';
		   else LowNibble =LowNibble -'A'+10;

	return (byte)((HighNibble<<4)+LowNibble);
}

void DownLoad(long LoadStartAddress)
{
	byte DataCount;
	word OffsetAddress;
	byte RecordType =0;
	byte TotalSum =0;

	byte far* WriteAddress;

	while(RecordType!=1)
	{
		//wait start of record
		while(ReceiveChar()!=':');

		TotalSum +=DataCount                  =ReceiveByte();//read repeat count from record
		TotalSum +=((byte*)&OffsetAddress)[1] =ReceiveByte();//read address
		TotalSum +=((byte*)&OffsetAddress)[0] =ReceiveByte();
		TotalSum +=RecordType                 =ReceiveByte();//

		//if data, write code in client memory
		if(RecordType==0)
		{
			WriteAddress =(byte far*)(LoadStartAddress+OffsetAddress);
			while(DataCount--) TotalSum+= *WriteAddress++ =ReceiveByte();
		}
		else
		{
			while(DataCount--) TotalSum+= ReceiveByte();
		}

		//read check sum itself
		TotalSum +=ReceiveByte();

		//summation check
		if(TotalSum!=0)
		{
			SendString(" Check_sum Error!\n");
			break;
		}
		else
		{
			TotalSum =0;//reset total sun
		}
	}
}

void main(void)
{
	InitPort();
	InitSerial();

	LedDisplay();

	SendString("\n");
	SendString(" Connected...\n");

	if(!GetKey())
	{
                DownLoad(0x04000000L); //전송없으면 무한루프로 기다림.
		Delay(50);
		SendString(" Loading complete...\n");
	}

	SendString(" Program start...\n");
	( *( void far (*)(void) )0x04000000L )();
	( *( void far (*)(void) )0xFFFF0000L )();
}
